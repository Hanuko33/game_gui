!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/i3riced/programming/c/game_gui/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
BIOME_DESERT	tiles.h	/^    BIOME_DESERT, \/\/ yellow$/;"	e	enum:biomes
BIOME_FOREST	tiles.h	/^    BIOME_FOREST, \/\/  green$/;"	e	enum:biomes
BIOME_LAKE	tiles.h	/^    BIOME_LAKE \/\/blue$/;"	e	enum:biomes
BIOME_SWEET_TREE	tiles.h	/^    BIOME_SWEET_TREE,\/\/brown$/;"	e	enum:biomes
CAT_MAX	categories_id.h	/^CAT_MAX$/;"	e	enum:category_id
CAT_material	categories_id.h	/^CAT_material,$/;"	e	enum:category_id
CAT_weapon	categories_id.h	/^CAT_weapon,$/;"	e	enum:category_id
CAVE_H	cave.h	/^#define CAVE_H$/;"	d
CHUNK_SIZE	tiles.h	/^#define CHUNK_SIZE /;"	d
CMAKE_BUILD_TYPE	CMakeLists.txt	/^set(CMAKE_BUILD_TYPE Debug)$/;"	v
DUMMY_H	notifier.h	/^#define DUMMY_H$/;"	d
DUNGEON_H	dungeon.h	/^#define DUNGEON_H$/;"	d
FONT_NAME	text.c	/^#define FONT_NAME /;"	d	file:
GAME_TIME_H	time.h	/^#define GAME_TIME_H$/;"	d
GAME_WINDOW	window.h	/^#define GAME_WINDOW /;"	d
Game_time	time.h	/^} Game_time;$/;"	t	typeref:struct:game_time
Gray	text.c	/^SDL_Color Gray = {200, 200, 200};$/;"	v	typeref:typename:SDL_Color
ITEMENT_H	items.h	/^#define ITEMENT_H$/;"	d
IT_MAX	items_id.h	/^IT_MAX,$/;"	e	enum:item_id
IT_log	items_id.h	/^IT_log,$/;"	e	enum:item_id
IT_sand	items_id.h	/^IT_sand,$/;"	e	enum:item_id
IT_stone	items_id.h	/^IT_stone,$/;"	e	enum:item_id
LOC_CAVE	player.h	/^    LOC_CAVE$/;"	e	enum:location
LOC_DUNGEON	player.h	/^    LOC_DUNGEON,$/;"	e	enum:location
LOC_WORLD	player.h	/^    LOC_WORLD,$/;"	e	enum:location
MENU_BOOST	menu.h	/^    MENU_BOOST,$/;"	e	enum:menu_actions
MENU_CANCEL	menu.h	/^    MENU_CANCEL,$/;"	e	enum:menu_actions
MENU_EXIT	menu.h	/^    MENU_EXIT,$/;"	e	enum:menu_actions
MENU_H	menu.h	/^#define MENU_H$/;"	d
MENU_HELP	menu.h	/^    MENU_HELP,$/;"	e	enum:menu_actions
MENU_ITEM	menu.h	/^    MENU_ITEM=0x80,$/;"	e	enum:menu_actions
MENU_LOAD	menu.h	/^    MENU_LOAD,$/;"	e	enum:menu_actions
MENU_LOUDER	menu.h	/^    MENU_LOUDER,$/;"	e	enum:menu_actions
MENU_MATERIAL	menu.h	/^    MENU_MATERIAL=0x100,$/;"	e	enum:menu_actions
MENU_MUSIC	menu.h	/^    MENU_MUSIC,$/;"	e	enum:menu_actions
MENU_QUIETER	menu.h	/^    MENU_QUIETER,$/;"	e	enum:menu_actions
MENU_REGAIN	menu.h	/^    MENU_REGAIN,$/;"	e	enum:menu_actions
MENU_SAVE	menu.h	/^    MENU_SAVE,$/;"	e	enum:menu_actions
MENU_SAVE_EXIT	menu.h	/^    MENU_SAVE_EXIT,$/;"	e	enum:menu_actions
MENU_WEAPON	menu.h	/^    MENU_WEAPON$/;"	e	enum:menu_actions
MUSIC_H	music.h	/^#define MUSIC_H$/;"	d
Musics	music.h	/^struct Musics$/;"	s
PANEL_WINDOW	window.h	/^#define PANEL_WINDOW /;"	d
PLAYER_H	player.h	/^#define PLAYER_H$/;"	d
Player	player.h	/^struct Player$/;"	s
Red	text.c	/^SDL_Color Red = {255, 0, 0};$/;"	v	typeref:typename:SDL_Color
TEXTURE_H	texture.h	/^#define TEXTURE_H$/;"	d
TEXT_H	text.h	/^#define TEXT_H$/;"	d
TILES_H	tiles.h	/^#define TILES_H$/;"	d
TILE_CAVE_DOOR	tiles.h	/^    TILE_CAVE_DOOR,$/;"	e	enum:game_tiles
TILE_CAVE_FLOOR	tiles.h	/^    TILE_CAVE_FLOOR,$/;"	e	enum:game_tiles
TILE_CAVE_WALL	tiles.h	/^    TILE_CAVE_WALL,$/;"	e	enum:game_tiles
TILE_DIRT	tiles.h	/^    TILE_DIRT,$/;"	e	enum:game_tiles
TILE_DUNG_DOOR	tiles.h	/^    TILE_DUNG_DOOR,$/;"	e	enum:game_tiles
TILE_DUNG_FLOOR	tiles.h	/^    TILE_DUNG_FLOOR,$/;"	e	enum:game_tiles
TILE_DUNG_WALL	tiles.h	/^    TILE_DUNG_WALL,$/;"	e	enum:game_tiles
TILE_GRASS	tiles.h	/^    TILE_GRASS,$/;"	e	enum:game_tiles
TILE_MAX_NUM	tiles.h	/^    TILE_MAX_NUM$/;"	e	enum:game_tiles
TILE_SAND	tiles.h	/^    TILE_SAND,$/;"	e	enum:game_tiles
TILE_SANDSTONE	tiles.h	/^    TILE_SANDSTONE,$/;"	e	enum:game_tiles
TILE_STONE	tiles.h	/^    TILE_STONE,$/;"	e	enum:game_tiles
TILE_SWEET_BUSH	tiles.h	/^    TILE_SWEET_BUSH,$/;"	e	enum:game_tiles
TILE_SWEET_FLOWER	tiles.h	/^    TILE_SWEET_FLOWER,$/;"	e	enum:game_tiles
TILE_SWEET_GRASS	tiles.h	/^    TILE_SWEET_GRASS,$/;"	e	enum:game_tiles
TILE_SWEET_TREE	tiles.h	/^    TILE_SWEET_TREE,$/;"	e	enum:game_tiles
TILE_TREE	tiles.h	/^    TILE_TREE,$/;"	e	enum:game_tiles
TILE_WATER	tiles.h	/^    TILE_WATER,$/;"	e	enum:game_tiles
Texture	texture.c	/^struct textures Texture;$/;"	v	typeref:struct:textures
WINDOW_H	window.h	/^#define WINDOW_H$/;"	d
WORLD_CENTER	tiles.h	/^#define WORLD_CENTER /;"	d
WORLD_H	world.h	/^#define WORLD_H$/;"	d
WORLD_SIZE	tiles.h	/^#define WORLD_SIZE /;"	d
White	text.c	/^SDL_Color White = {255, 255, 255};$/;"	v	typeref:typename:SDL_Color
__anone1ec771c0108	tiles.h	/^typedef struct {$/;"	s
actions	menu.h	/^    enum menu_actions * actions;$/;"	m	struct:menu_struct	typeref:enum:menu_actions *
active_hotbar	main.c	/^int active_hotbar=-1;$/;"	v	typeref:typename:int
add_entry	menu.c	/^void add_entry(struct menu_struct *m, const char * e, enum menu_actions a)$/;"	f	typeref:typename:void
add_item	items.c	/^void add_item(enum item_id id, enum category_id cat)$/;"	f	typeref:typename:void
add_items_texture	texture.c	/^void add_items_texture(enum item_id id, const char * file)$/;"	f	typeref:typename:void
add_tile_texture	texture.c	/^void add_tile_texture(enum game_tiles id, const char * file)$/;"	f	typeref:typename:void
added	menu.h	/^    int added;$/;"	m	struct:menu_struct	typeref:typename:int
auto_explore	main.c	/^int auto_explore;$/;"	v	typeref:typename:int
back_x	player.h	/^	int back_x;$/;"	m	struct:Player	typeref:typename:int
back_y	player.h	/^	int back_y;$/;"	m	struct:Player	typeref:typename:int
biome	tiles.h	/^    enum biomes biome;$/;"	m	struct:__anone1ec771c0108	typeref:enum:biomes
biomes	tiles.h	/^enum  biomes$/;"	g
cat	items.h	/^    enum category_id cat;$/;"	m	struct:item	typeref:enum:category_id
categories_names	categories_names.h	/^const char * categories_names[CAT_MAX]=$/;"	v	typeref:typename:const char * []
category_id	categories_id.h	/^enum category_id$/;"	g
check_and_move	player.c	/^void check_and_move(struct Player * p, int new_map_x, int new_map_y, int new_x, int new_y)$/;"	f	typeref:typename:void
chunk	tiles.h	/^} chunk;$/;"	t	typeref:struct:__anone1ec771c0108
chunk_table	tiles.h	/^typedef struct tile chunk_table[3][CHUNK_SIZE][CHUNK_SIZE];$/;"	t	typeref:struct:tile[3][CHUNK_SIZE][CHUNK_SIZE]
clear_window	window.c	/^void clear_window()$/;"	f	typeref:typename:void
color	window.c	/^unsigned int color(int r, int g, int b, int a) {$/;"	f	typeref:typename:unsigned int
count	items.h	/^    int count;$/;"	m	struct:item	typeref:typename:int
create_biome_desert	world.c	/^void create_biome_desert(chunk * chunk)$/;"	f	typeref:typename:void
create_biome_forest	world.c	/^void create_biome_forest(chunk * chunk)$/;"	f	typeref:typename:void
create_biome_lake	world.c	/^void create_biome_lake(chunk * chunk)$/;"	f	typeref:typename:void
create_biome_sweet_tree	world.c	/^void create_biome_sweet_tree(chunk * chunk)$/;"	f	typeref:typename:void
create_menu	menu.c	/^void create_menu(struct menu_struct * m, int opt)$/;"	f	typeref:typename:void
create_menus	menu.c	/^void create_menus()$/;"	f	typeref:typename:void
current_menu	menu.c	/^struct menu_struct * current_menu;$/;"	v	typeref:struct:menu_struct *
days	time.h	/^    int days;$/;"	m	struct:game_time	typeref:typename:int
draw	main.c	/^void draw()$/;"	f	typeref:typename:void
energy	player.h	/^    int energy;$/;"	m	struct:Player	typeref:typename:int
entries	menu.h	/^    const char ** entries;$/;"	m	struct:menu_struct	typeref:typename:const char **
font	text.c	/^TTF_Font* font;$/;"	v	typeref:typename:TTF_Font *
force_screen	main.c	/^char force_screen=1;$/;"	v	typeref:typename:char
game_gui	CMakeLists.txt	/^add_executable(game_gui window.c music.c text.c time.c texture.c dungeon.c cave.c main.c menu.c /;"	t
game_gui	CMakeLists.txt	/^project(game_gui)$/;"	p
game_tiles	tiles.h	/^enum  game_tiles$/;"	g
game_time	time.h	/^typedef struct game_time$/;"	s
game_time	world.c	/^Game_time game_time;$/;"	v	typeref:typename:Game_time
generate_cave	cave.c	/^void generate_cave(chunk* chunk, int entrance_x, int entrance_y)$/;"	f	typeref:typename:void
generate_chunk	world.c	/^void generate_chunk(chunk *chunk)  $/;"	f	typeref:typename:void
generate_dungeon	dungeon.c	/^void generate_dungeon(chunk* chunk, int door_x, int door_y)$/;"	f	typeref:typename:void
generator	world.c	/^void generator()$/;"	f	typeref:typename:void
get_item_at	world.c	/^struct item get_item_at(int chunk_x, int chunk_y, int x, int y, int z)$/;"	f	typeref:struct:item
get_item_at_ppos	world.c	/^struct item get_item_at_ppos(struct Player * player)$/;"	f	typeref:struct:item
get_tile_at	world.c	/^enum game_tiles get_tile_at(int chunk_x, int chunk_y, int x, int y, int z)$/;"	f	typeref:enum:game_tiles
get_tile_at_ppos	world.c	/^enum game_tiles get_tile_at_ppos(struct Player *player)$/;"	f	typeref:enum:game_tiles
going_right	player.h	/^    char going_right;$/;"	m	struct:Player	typeref:typename:char
handle_item	menu.c	/^int handle_item(int i)$/;"	f	typeref:typename:int
hotbar	player.h	/^    int hotbar[10];$/;"	m	struct:Player	typeref:typename:int[10]
hours	time.h	/^    int hours;$/;"	m	struct:game_time	typeref:typename:int
id	items.h	/^    enum item_id id;$/;"	m	struct:item	typeref:enum:item_id
in	player.h	/^    enum location in;$/;"	m	struct:Player	typeref:enum:location
init_items	items.c	/^void init_items()$/;"	f	typeref:typename:void
init_music	music.c	/^int init_music()$/;"	f	typeref:typename:int
init_player	player.c	/^void init_player()$/;"	f	typeref:typename:void
init_window	window.c	/^int  init_window()$/;"	f	typeref:typename:int
interact	menu.c	/^int interact(enum menu_actions a)$/;"	f	typeref:typename:int
inventory	player.h	/^    int inventory[IT_MAX]; $/;"	m	struct:Player	typeref:typename:int[]
item	items.h	/^struct item {$/;"	s
item	tiles.h	/^    struct item item;$/;"	m	struct:tile	typeref:struct:item
item_id	items_id.h	/^enum item_id$/;"	g
items	items.c	/^struct item items[IT_MAX];$/;"	v	typeref:struct:item[]
items_names	items_names.h	/^const char * items_names[IT_MAX]=$/;"	v	typeref:typename:const char * []
items_textures	texture.c	/^SDL_Texture * items_textures[IT_MAX];$/;"	v	typeref:typename:SDL_Texture * []
load	main.c	/^void load(char with_player)$/;"	f	typeref:typename:void
load_chunk	world.c	/^char load_chunk(int x, int y)$/;"	f	typeref:typename:char
load_font	text.c	/^int load_font()$/;"	f	typeref:typename:int
load_music	music.c	/^void load_music()$/;"	f	typeref:typename:void
load_texture	texture.c	/^SDL_Texture* load_texture(const char * texture_name)$/;"	f	typeref:typename:SDL_Texture *
load_textures	texture.c	/^void load_textures()$/;"	f	typeref:typename:void
location	player.h	/^enum location$/;"	g
main	main.c	/^int main(int argi, char** agrs)$/;"	f	typeref:typename:int
main_window	window.c	/^SDL_Window *main_window;$/;"	v	typeref:typename:SDL_Window *
map	main.c	/^SDL_Texture *map;$/;"	v	typeref:typename:SDL_Texture *
map_x	player.h	/^    int map_x;$/;"	m	struct:Player	typeref:typename:int
map_y	player.h	/^    int map_y;$/;"	m	struct:Player	typeref:typename:int
menu_actions	menu.h	/^enum menu_actions$/;"	g
menu_energy	menu.c	/^struct menu_struct menu_energy;$/;"	v	typeref:struct:menu_struct
menu_go_down	menu.c	/^void menu_go_down()$/;"	f	typeref:typename:void
menu_go_up	menu.c	/^void menu_go_up()$/;"	f	typeref:typename:void
menu_help	menu.c	/^struct menu_struct menu_help;$/;"	v	typeref:struct:menu_struct
menu_interact	menu.c	/^int menu_interact(int key)$/;"	f	typeref:typename:int
menu_inventory_categories	menu.c	/^struct menu_struct menu_inventory_categories;$/;"	v	typeref:struct:menu_struct
menu_inventory_material	menu.c	/^struct menu_struct menu_inventory_material;$/;"	v	typeref:struct:menu_struct
menu_main	menu.c	/^struct menu_struct menu_main;$/;"	v	typeref:struct:menu_struct
menu_music	menu.c	/^struct menu_struct menu_music;$/;"	v	typeref:struct:menu_struct
menu_pos	menu.h	/^    int menu_pos;$/;"	m	struct:menu_struct	typeref:typename:int
menu_struct	menu.h	/^struct menu_struct$/;"	s
minutes	time.h	/^    int minutes;$/;"	m	struct:game_time	typeref:typename:int
move_player	player.c	/^void move_player(struct Player *p, int dx, int dy)$/;"	f	typeref:typename:void
music	music.c	/^struct Musics music;$/;"	v	typeref:struct:Musics
music_one	music.h	/^    Mix_Chunk* music_one;$/;"	m	struct:Musics	typeref:typename:Mix_Chunk *
music_two	music.h	/^    Mix_Chunk* music_two;$/;"	m	struct:Musics	typeref:typename:Mix_Chunk *
name	items.h	/^    const char *name;$/;"	m	struct:item	typeref:typename:const char *
notify_load_chunk	notifier.c	/^void notify_load_chunk(int x, int y)$/;"	f	typeref:typename:void
options	menu.h	/^    int options;$/;"	m	struct:menu_struct	typeref:typename:int
player	player.c	/^struct Player player;$/;"	v	typeref:struct:Player
player_interact	main.c	/^void player_interact(int key )$/;"	f	typeref:typename:void
playerl	texture.h	/^        SDL_Texture* playerl;$/;"	m	struct:textures	typeref:typename:SDL_Texture *
playerr	texture.h	/^        SDL_Texture* playerr;$/;"	m	struct:textures	typeref:typename:SDL_Texture *
renderer	window.c	/^SDL_Renderer *renderer;$/;"	v	typeref:typename:SDL_Renderer *
run_icon	texture.h	/^        SDL_Texture* run_icon;$/;"	m	struct:textures	typeref:typename:SDL_Texture *
running	player.h	/^    char running;$/;"	m	struct:Player	typeref:typename:char
save	main.c	/^void save(char with_player)$/;"	f	typeref:typename:void
seconds	time.h	/^    int seconds;$/;"	m	struct:game_time	typeref:typename:int
show_menu	menu.c	/^void show_menu()$/;"	f	typeref:typename:void
table	tiles.h	/^    chunk_table table;$/;"	m	struct:__anone1ec771c0108	typeref:typename:chunk_table
textures	texture.h	/^struct textures$/;"	s
tile	tiles.h	/^    enum game_tiles tile;$/;"	m	struct:tile	typeref:enum:game_tiles
tile	tiles.h	/^struct tile {$/;"	s
tiles_textures	texture.c	/^SDL_Texture * tiles_textures[TILE_MAX_NUM];$/;"	v	typeref:typename:SDL_Texture * []
traversable_tiles	world.c	/^char traversable_tiles[TILE_MAX_NUM] =$/;"	v	typeref:typename:char[]
update_time	time.c	/^void update_time()$/;"	f	typeref:typename:void
update_window_size	main.c	/^void update_window_size()$/;"	f	typeref:typename:void
window_height	window.c	/^int window_height;$/;"	v	typeref:typename:int
window_width	window.c	/^int window_width;$/;"	v	typeref:typename:int
world_table	world.c	/^chunk * world_table[WORLD_SIZE][WORLD_SIZE];$/;"	v	typeref:typename:chunk * [][]
write_text	text.c	/^void write_text(int x, int y, const char * text, SDL_Color color, int scale_x, int scale_y)$/;"	f	typeref:typename:void
x	player.h	/^    int x;$/;"	m	struct:Player	typeref:typename:int
y	player.h	/^    int y;$/;"	m	struct:Player	typeref:typename:int
z	player.h	/^    int z;$/;"	m	struct:Player	typeref:typename:int
